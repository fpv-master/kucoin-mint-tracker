import dotenv from 'dotenv';
dotenv.config();

import TelegramBot from 'node-telegram-bot-api';
import WebSocket from 'ws';

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });
const HELIUS_KEY = process.env.HELIUS_API_KEY;
const CHAT_ID = process.env.TELEGRAM_CHAT_ID;

const activeWatchers = new Map();
const seenSignatures = new Set();

bot.on('message', (msg) => {
  const text = msg.text;
  if (!text) return;

  // üß† –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –∏ —Å—É–º–º—É
  let label = null;
  if (text.includes('–ö—É–∫–æ–∏–Ω –ë–∏—Ä–∂–∞') && text.includes('99.99 SOL')) {
    label = '–ö—É–∫–æ–∏–Ω 1';
  } else if (text.includes('–ö—É–∫–æ–∏–Ω 50') && text.includes('68.99 SOL')) {
    label = '–ö—É–∫ 3';
  }

  if (!label) return;

  // üîó –ò—â–µ–º –∞–¥—Ä–µ—Å –≤ —Å—Å—ã–ª–∫–µ –Ω–∞ solscan
  const linkMatch = text.match(/solscan\.io\/account\/(\w{32,44})/);
  const wallet = linkMatch?.[1];
  if (!wallet) return;

  if (activeWatchers.has(wallet)) return;

  bot.sendMessage(CHAT_ID,
    `‚ö†Ô∏è [${label}] –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ ${label === '–ö—É–∫ 3' ? '68.99' : '99.99'} SOL\n` +
    `üí∞ –ê–¥—Ä–µ—Å: <code>${wallet}</code>\n` +
    `‚è≥ –û–∂–∏–¥–∞–µ–º mint...`, { parse_mode: 'HTML' });

  watchMint(wallet, label);
});

function watchMint(wallet, label) {
  const ws = new WebSocket(`wss://rpc.helius.xyz/?api-key=${HELIUS_KEY}`);
  activeWatchers.set(wallet, ws);

  ws.on('open', () => {
    console.log(`‚úÖ [${label}] Listening for mint on ${wallet}`);
    ws.send(JSON.stringify({
      jsonrpc: '2.0',
      id: 1,
      method: 'logsSubscribe',
      params: [
        { mentions: [wallet] },
        { commitment: 'confirmed', encoding: 'jsonParsed' }
      ]
    }));
  });

  ws.on('message', (data) => {
    try {
      const msg = JSON.parse(data);
      const logs = msg?.params?.result?.value?.logs || [];
      const sig = msg?.params?.result?.value?.signature;
      const mentions = msg?.params?.result?.value?.mentions || [];
      if (!sig || seenSignatures.has(sig)) return;

      const found = logs.find((log) =>
        log.includes('InitializeMint') || log.includes('InitializeMint2')
      );
      if (!found) return;

      const mintAddress = mentions?.[0] || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω';
      seenSignatures.add(sig);
      bot.sendMessage(CHAT_ID,
        `üöÄ [${label}] Mint –æ–±–Ω–∞—Ä—É–∂–µ–Ω!\n` +
        `ü™ô –ö–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–æ–∫–µ–Ω–∞: <code>${mintAddress}</code>`, { parse_mode: 'HTML' });

      ws.close();
      activeWatchers.delete(wallet);
    } catch (e) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', e.message);
    }
  });

  ws.on('close', () => {
    console.log(`‚ùå [${label}] WebSocket closed for ${wallet}`);
    activeWatchers.delete(wallet);
  });

  ws.on('error', (e) => console.log(`üí• WebSocket error: ${e.message}`));
}
